# file: dashboard.py
import streamlit as st
import pandas as pd
from streamlit_autorefresh import st_autorefresh
from db_utils import get_db_connection
import json

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
REFRESH_INTERVAL_SECONDS = 10
st.set_page_config(page_title="Trading Bot Dashboard", layout="wide")
st_autorefresh(interval=REFRESH_INTERVAL_SECONDS * 1000, key="dashboard_refresh")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data(ttl=REFRESH_INTERVAL_SECONDS)
def load_data():
    conn = get_db_connection()
    active = pd.read_sql_query("SELECT * FROM managed_trades WHERE status != 'CLOSED' ORDER BY created_at DESC", conn)
    history = pd.read_sql_query("SELECT * FROM managed_trades WHERE status = 'CLOSED' ORDER BY updated_at DESC LIMIT 50", conn)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º left join –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∂–∏–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏
    prices = pd.read_sql_query("SELECT * FROM live_prices", conn)
    if not active.empty and not prices.empty:
        active = pd.merge(active, prices, on='symbol', how='left')
    conn.close()
    return active, history

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞—à–±–æ—Ä–¥–∞ ---
st.title("ü§ñ Stateful Trading Bot Dashboard v2.0")
active_df, history_df = load_data()

# --- –ë–ª–æ–∫ 1: –£–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –°–¥–µ–ª–∫–∏ ---
st.subheader("üìä Managed Trades")
if not active_df.empty:
    active_df['progress'] = active_df['executed_qty'] / active_df['total_qty']
    # –î–æ–±–∞–≤–∏–º uPNL (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    if 'mark_price' in active_df.columns:
        active_df['uPNL'] = (active_df['mark_price'] - active_df['avg_entry_price']) * active_df['executed_qty']
        active_df.loc[active_df['side'] == 'short', 'uPNL'] *= -1

    st.dataframe(
        active_df.style.bar(subset=['progress'], align='mid', color=['#d6e8d6', '#e8d6d6']),
        use_container_width=True, hide_index=True
    )
else:
    st.info("No active trades to manage.")

# --- –ë–ª–æ–∫ 2: –ò—Å—Ç–æ—Ä–∏—è –°–¥–µ–ª–æ–∫ ---
st.subheader("üìà Trade History")
if not history_df.empty:
    st.dataframe(history_df, use_container_width=True, hide_index=True)
else:
    st.info("Trade history is empty.")

# --- –ë–ª–æ–∫ 3: –ñ—É—Ä–Ω–∞–ª –°–æ–±—ã—Ç–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω) ---
# ...