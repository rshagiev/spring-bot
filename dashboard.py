# File: dashboard.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø)
import streamlit as st
import pandas as pd
import requests
import sqlite3 # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π sqlite3
import sqlite_utils
import json
import os
from streamlit_autorefresh import st_autorefresh

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
API_BASE_URL = os.getenv("BOT_API_URL", "http://127.0.0.1:8000")
DB_FILE = os.getenv("TRADE_DB", "trades.sqlite")
REFRESH_INTERVAL_SECONDS = 5

st.set_page_config(
    page_title="Trading Bot Dashboard",
    layout="wide",
)

# --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st_autorefresh(interval=REFRESH_INTERVAL_SECONDS * 1000, key="dashboard_refresh")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_resource
def get_db_conn():
    """
    –ö–µ—à–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î.
    –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º sqlite3 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –æ—Ç–∫–ª—é—á–∞—è –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Ç–æ–∫–∞
        conn = sqlite3.connect(DB_FILE, check_same_thread=False)
        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–≥–æ –≤ –æ–±—ä–µ–∫—Ç sqlite_utils
        return sqlite_utils.Database(conn)
    except Exception as e:
        st.error(f"Failed to connect to database: {DB_FILE}. Error: {e}")
        return None

@st.cache_data(ttl=REFRESH_INTERVAL_SECONDS)
def get_open_positions():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –Ω–∞—à–µ–≥–æ API."""
    try:
        response = requests.get(f"{API_BASE_URL}/open_positions")
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException:
        return {}

@st.cache_data(ttl=REFRESH_INTERVAL_SECONDS)
def get_event_log(limit=20):
    """–ß–∏—Ç–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –ª–æ–≥–∞."""
    db = get_db_conn()
    if db is None or 'trade_log' not in db.table_names():
        return []
    try:
        return list(db.table('trade_log').rows_where(order_by='id DESC', limit=limit))
    except Exception:
        return []

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞—à–±–æ—Ä–¥–∞ ---
st.title("ü§ñ LLM-Driven Trading Bot Dashboard")

# --- –°–µ–∫—Ü–∏—è 1: –û—Ç–∫—Ä—ã—Ç—ã–µ –ü–æ–∑–∏—Ü–∏–∏ ---
st.subheader("üìä Open Positions")
positions_data = get_open_positions()
if positions_data:
    positions_df = pd.DataFrame(list(positions_data.values()))
    display_cols = {
        'symbol': 'Symbol', 'side': 'Side', 'contracts': 'Size',
        'entryPrice': 'Entry', 'markPrice': 'Mark', 'unrealizedPnl': 'uPNL'
    }
    existing_cols = [col for col in display_cols.keys() if col in positions_df.columns]
    if existing_cols:
        filtered_df = positions_df[existing_cols].rename(columns=display_cols)
        st.dataframe(filtered_df, use_container_width=True, hide_index=True)
    else:
        st.info("No open positions with required data.")
else:
    st.info("No open positions or API not reachable.")

# --- –°–µ–∫—Ü–∏—è 2: –ñ—É—Ä–Ω–∞–ª –°–æ–±—ã—Ç–∏–π ---
st.subheader("üìú Recent Events")
log_data = get_event_log()
if log_data:
    log_df = pd.DataFrame(log_data)
    if 'payload_json' in log_df.columns:
        log_df['timestamp_utc'] = pd.to_datetime(log_df['timestamp_utc']).dt.strftime('%Y-%m-%d %H:%M:%S')
        def pretty_payload(payload_str):
            try: return json.loads(payload_str)
            except: return payload_str
        log_df['payload'] = log_df['payload_json'].apply(pretty_payload)
        st.dataframe(
            log_df[['timestamp_utc', 'event_type', 'payload']],
            use_container_width=True,
            hide_index=True
        )
    else:
        st.dataframe(log_df, use_container_width=True, hide_index=True)
else:
    st.warning("Event log is empty or database not found.")

# --- –°–µ–∫—Ü–∏—è 3: –ö—Ä–∏–≤–∞—è –∫–∞–ø–∏—Ç–∞–ª–∞ (–∑–∞–≥–ª—É—à–∫–∞) ---
st.subheader("üìà Equity Curve (placeholder)")
st.info("Equity curve will be implemented once PnL data is logged upon trade closure.")