# file: tests/test_signal_parser.py
import pytest
from signal_parser import parse_pentagon_signal

# –ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
VALID_SIGNAL_TEXT = """
üî¥–ø—Ä–æ–±—É—é —à–æ—Ä—Ç 109200-110500 –∏ —Ä–∏—Å–∫–æ–º 0.5% (1/2) —Å—Ç–æ–ø –Ω–∞–¥ 111500, –ø–æ—Å–ª–µ 2–æ–≥–æ —Ç–µ–π–∫–∞ –≤ –±—É
–¶–µ–ª–∏: 
109000-108800-108600
"""

# –ü—Ä–∏–º–µ—Ä —Å–∏–≥–Ω–∞–ª–∞ —Å –æ—à–∏–±–∫–æ–π (–Ω–µ—Ç —Ç–µ–π–∫–æ–≤)
INVALID_SIGNAL_TEXT = "üî¥–ø—Ä–æ–±—É—é —à–æ—Ä—Ç 109200-110500 –∏ —Ä–∏—Å–∫–æ–º 0.5% (1/2) —Å—Ç–æ–ø –Ω–∞–¥ 111500"

def test_parse_valid_signal_success():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞."""
    instruction = parse_pentagon_signal(VALID_SIGNAL_TEXT)
    
    assert instruction is not None
    assert instruction.side == 'short'
    assert instruction.entry_start == 109200.0
    assert instruction.entry_end == 110500.0
    assert instruction.stop_loss == 111500.0
    assert instruction.risk_pct == pytest.approx(0.005)
    assert instruction.size_fraction == pytest.approx(0.5)
    assert instruction.take_profits == [109000.0, 108800.0, 108600.0]

def test_parse_invalid_signal_returns_none():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø–∞—Ä—Å–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞."""
    instruction = parse_pentagon_signal(INVALID_SIGNAL_TEXT)
    assert instruction is None

def test_parse_empty_string_returns_none():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏."""
    instruction = parse_pentagon_signal("")
    assert instruction is None